<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Games 202 on Kampter</title><link>https://kampter.github.io/tags/games-202/</link><description>Recent content in Games 202 on Kampter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Feb 2023 23:16:34 +0000</lastBuildDate><atom:link href="https://kampter.github.io/tags/games-202/index.xml" rel="self" type="application/rss+xml"/><item><title>Games 202 - PBR rendering 总结</title><link>https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/</link><pubDate>Sun, 26 Feb 2023 23:16:34 +0000</pubDate><guid>https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/</guid><description>&lt;h2 id="直接光照">直接光照
&lt;/h2>&lt;p>在不考虑能量补偿的情况下 传统的Blinn Phong模型是&lt;/p>
&lt;p>diffuse + specular + ambient&lt;/p>
&lt;p>而cook-torrance BRDF的方程是&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226131940960.png"
width="380"
height="55"
srcset="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226131940960_hu_70508f173ef4f314.png 480w, https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226131940960_hu_956b34808eb9250e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="690"
data-flex-basis="1658px"
>&lt;/p>
&lt;p>其中Ks = F, 且金属材质的漫反射为0&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226131632859.png"
width="522"
height="76"
srcset="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226131632859_hu_c33e4542145b67bc.png 480w, https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226131632859_hu_60c66010dda71a36.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="686"
data-flex-basis="1648px"
>&lt;/p>
&lt;h3 id="阴影">阴影
&lt;/h3>&lt;p>各种优化过的Shadow Map, PCF, PCSS等等&lt;/p>
&lt;h2 id="间接光照">间接光照
&lt;/h2>&lt;p>&lt;img src="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/v2-0283ea94721af41f092d612d90e311b4_r.jpg"
width="720"
height="401"
srcset="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/v2-0283ea94721af41f092d612d90e311b4_r_hu_d12552642c44c8b1.jpg 480w, https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/v2-0283ea94721af41f092d612d90e311b4_r_hu_79fe4cffe68b82d2.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>间接光照与直接光照思路相同&lt;/p>
&lt;ol>
&lt;li>直接光源是指物体自身发出的光，比如灯泡、蜡烛、荧光棒、太阳&lt;/li>
&lt;li>间接光源是指物体反射出来的光，直接看图，下边的右图，两边的墙壁反射出自身的颜色，照亮了场景中的物体&lt;/li>
&lt;/ol>
&lt;p>那么间接光照的实现思路也是&lt;/p>
&lt;ol>
&lt;li>有哪些间接光源会向外发射Radiance？（找到光源）&lt;/li>
&lt;li>哪些方向的间接光源Radiance会到达着色点？（构建光照模型）&lt;/li>
&lt;/ol>
&lt;h3 id="环境光">环境光
&lt;/h3>&lt;p>环境光包括其他物体反射的光以及所谓天空盒发出的光照&lt;/p>
&lt;p>最简单的环境光可以是一个常量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-HLSL" data-lang="HLSL">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float3&lt;/span> &lt;span class="n">ambient&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">float3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而符合物理的计算方式是基于图像的照明（&lt;strong>IBL&lt;/strong>）来计算&lt;/p>
&lt;h3 id="漫反射部分">漫反射部分
&lt;/h3>&lt;p>&lt;img src="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226230604595.png"
width="599"
height="55"
srcset="https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226230604595_hu_50c13dc79d319db7.png 480w, https://kampter.github.io/p/games-202-pbr-rendering-%E6%80%BB%E7%BB%93/image-20230226230604595_hu_2e54bf375b7aed45.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="1089"
data-flex-basis="2613px"
>&lt;/p>
&lt;p>而Irradiance因为是低频信号可以用SH函数拟合。&lt;/p>
&lt;p>其中使用PRT改进的SH就自带类似AO的效果。&lt;/p>
&lt;h3 id="镜面反射比较难实现">镜面反射比较难实现
&lt;/h3>&lt;p>SSR是基于光线追踪的做法&lt;/p>
&lt;h3 id="阴影-1">阴影
&lt;/h3>&lt;p>间接光照的阴影实现比较难实现，目前较为黑科技的代表是SSAO&lt;/p>
&lt;h2 id="能量补偿部分httpszhuanlanzhihucomp503998650">&lt;a class="link" href="https://zhuanlan.zhihu.com/p/503998650" target="_blank" rel="noopener"
>能量补偿部分&lt;/a>
&lt;/h2>&lt;p>后面有机会实现一下&lt;/p>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ol>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/416112744" target="_blank" rel="noopener"
>重新理解PBR（1） - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/452190320" target="_blank" rel="noopener"
>重新理解PBR（2）——漫反射全局光照 - 知乎 (zhihu.com)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.blurredcode.com/2021/05/dec701b2/#diffusediffuse-irradiance-map" target="_blank" rel="noopener"
>PBR渲染: Cook-Torrance的实现与补充 | Blurred code&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Games 202 - PBR材质</title><link>https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/</link><pubDate>Sat, 25 Feb 2023 10:50:14 +0000</pubDate><guid>https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/</guid><description>&lt;h2 id="pbr">PBR
&lt;/h2>&lt;p>PBR包括Materials, lighting, camera, light transport等等任何与渲染有关的基于物理的内容。而工业界习惯叫PBR都是指PBR材质，虽然之前已经在unity中看过URP中PBR的实现原理并且尝试手动还原，这次看过Games 202后还是更加深化对PBR材质的了解。&lt;/p>
&lt;p>基于表面的材质&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Microfacet models微表面模型（不是完全基于物理的）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Disney Principled BRDF能够用于离线渲染, 但也可以运用在实时渲染中，但也不是PBR，是基于artist的角度来考虑的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>基于体积的材质&lt;/p>
&lt;ul>
&lt;li>实时渲染中并没有什么特别好的解决方案，常见的诸如云，头发，皮肤。&lt;/li>
&lt;/ul>
&lt;h2 id="microfacet-brdf">Microfacet BRDF
&lt;/h2>&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230225222721675.png" width="50%">
&lt;/figure>
&lt;p>&lt;strong>F项：菲涅尔项&lt;/strong>，表示观察角度与反射的关系(从一个角度看去会有多少的能量被反射) 当视线与反射表面夹角越小，反射越明显。水体是菲涅尔效应最明显的现实物体之一（当站在湖边看到脚下的湖水是透明的，而远处湖面的水则是不透明的，并且反射非常强烈）。&lt;/p>
&lt;p>标准菲尼尔项计算公式：&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226105412627.png" width="50%">
&lt;/figure>
&lt;p>而工业界主流使用采用 Schlick 的 Fresnel 近似，因为计算成本低廉，而且精度也足够。其中，n1、n2分别为两种介质的折射率。一般假设 n1=1 近似于空气折射率，而 n2取决于被渲染的物体介质。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226105515745.png" width="30%">
&lt;/figure>
&lt;p>&lt;strong>D项：微表面的法线分布&lt;/strong>决定这一项的是不同微表面朝向的法线分布；简单来说，当微平面的法线分布比较集中（各法线朝向大致相同）时，那么物体表面材质会更容易表现出高光；当微平面的法线分布比较散开（各法线朝向差异比较大）时，那么物体表面材质将表现的非常 diffuse。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226105622230.png" width="50%">
&lt;/figure>
&lt;p>传统的 Blinn-Phong 模型也是法线分布模型&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226105927827.png" width="25%">
&lt;/figure>
&lt;p>&lt;strong>Beckmann NDF&lt;/strong> 是第一批微平面模型中使用的法线分布，也是 Cook-Torrance BRDF 在最初提出时选择的NDF。其中，α∈[0,1] 表示为表面的粗糙程度。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110000794.png" width="35%">
&lt;/figure>
&lt;p>&lt;strong>GGX/Trowbridge-Reitz NDF&lt;/strong> 是URP现在采用的法线分布函数&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110036570.png" width="35%">
&lt;/figure>
&lt;p>GGX / Trowbridge-Reitz NDF 与 Beckmann NDF 的主要区别在于前者函数具有更长的尾巴，这样就可以让高光部分过渡部分更加缓和，从而更加自然。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110129681.png" width="50%">
&lt;/figure>
&lt;p>&lt;strong>Generalized-Trowbridge-Reitz（GTR）&lt;/strong>&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110153956.png" width="30%">
&lt;/figure>
&lt;p>其中， γ参数用于控制尾部形状。 当 γ=2 时，GTR等同于GGX。 随着 γ的值减小，分布的尾部变得更长。而随着 γ 值的增加，分布的尾部变得更短。&lt;/p>
&lt;p>&lt;strong>G项：几何函数&lt;/strong>体现了光在物体微平面上反射时的损耗，一般指两种损耗：阴影（Shadowing）和遮蔽（Obstruction）。&lt;/p>
&lt;p>阴影来自光照射在微表面的遮挡，而遮蔽来自光反弹后被微表面遮挡。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110641358.png" width="50%">
&lt;/figure>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110622330.png" width="40%">
&lt;/figure>
&lt;h3 id="能量补偿项energy-compensation-term">能量补偿项（Energy Compensation Term）
&lt;/h3>&lt;p>几何函数表示了光在物体微平面上反射时的损耗，但实际上这些光线并不是损耗了，而是变成了微平面之间的互反射或多次表面反射的光线，但是Microfacet理论忽略了这些反射，这样做的缺点是会造成越 diffuse 的物体能量损失越多，从而使粗糙物体渲染偏暗。&lt;/p>
&lt;p>解决办法是使用 The Kulla-Conty Approximation 补偿能量在BRDF上面&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226110849478.png" width="70%">
&lt;/figure>
&lt;p>使用能量补偿后渲染方程变为&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226111145169.png" width="70%">
&lt;/figure>
&lt;p>闫神说现在有人用diffuse + brdf 来描述能量补偿，也就是粗暴的用diffuse来补偿能量，但是不符合能量守恒定律。&lt;/p>
&lt;p>这里的补偿是指单独对specular BRDF的补偿，而不包括diffuse部分的，因此所谓弹幕中说opengl中cook-torrance brdf多加diffuse错误的理解是不对的。闫神指出这种错误其实在最终计算会叠加2次diffuse因此是能量不守恒的。&lt;/p>
&lt;h2 id="linearly-transformed-cosines-ltc">Linearly Transformed Cosines (LTC)
&lt;/h2>&lt;p>LTC:&lt;strong>在不考虑遮挡和阴影情况下做微表面模型的shading.&lt;/strong>&lt;/p>
&lt;p>我的理解是为了实现多边形光源对原Microfacet BRDF的改进，主要改进GGX发现分布项。&lt;/p>
&lt;p>但是这个模型并不能很好的支持阴影&lt;/p>
&lt;h2 id="disneys-principled-brdf">Disney’s Principled BRDF
&lt;/h2>&lt;p>Disney 总体上采用 microfacet Cook-Torrance BRDF 着色模型，并对其中一些项进行了改造，总体公式如下：&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226113414818.png" width="70%">
&lt;/figure>
&lt;p>参考&lt;a class="link" href="https://github.com/wdas/brdf/blob/main/src/brdfs/disney.brdf" target="_blank" rel="noopener"
>Disney 源码&lt;/a>：&lt;/p>
&lt;p>漫反射（Diffuse）&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226123706382.png" width="70%">
&lt;/figure>
&lt;p>高光部分与Cook-Torrance BRDF类似&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226123632386.png" width="25%">
&lt;/figure>
&lt;p>菲涅尔项（Fresnel Term）&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226123846683.png" width="70%">
&lt;/figure>
&lt;p>法线分布项（Normal Distribution Term）&lt;/p>
&lt;p>使用了 Generalized-Trowbridge-Reitz（GTR）γ=2 的版本，并根据各向异性做了一定改进。anisotropicanisotropic 表述了各向异性的程度，Xa,Ya则描述了各向异性的旋转方向。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226124105179.png" width="50%">
&lt;/figure>
&lt;p>几何函数 （Geometry Function）Disney 在几何函数上使用 Smith 遮蔽函数，并基于各向异性 GGX 分布来得到如下：&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226124328841.png" width="50%">
&lt;/figure>
&lt;p>次表面散射SSS&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226123722840.png" width="50%">
&lt;/figure>
&lt;p>Sheen 布料光泽&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226123722840.png" width="50%">
&lt;/figure>
&lt;p>清漆项（Clearcoat）简单粗暴的使用cook-torrance高光 * clearcoat&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226130639413.png" width="30%">
&lt;/figure>
&lt;p>使用 γ=1的各向同性 GTR 法线分布，并通过 clearcoatGlossclearcoatGloss 来控制清漆的光滑程度：&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226130724042.png" width="40%">
&lt;/figure>
&lt;p>使用 f0 = 0.04 的菲尼尔项和使用a = 0.25的ggx各向同性GGX&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-pbr%E6%9D%90%E8%B4%A8/image-20230226130811312.png" width="30%">
&lt;/figure>
&lt;p>&amp;mdash; 2023.03.16 更新&amp;mdash;&lt;/p>
&lt;p>&lt;a class="link" href="http://localhost:1313/p/%e5%9c%a8urp%e4%b8%ad%e6%90%ad%e5%bb%ba%e4%b8%80%e4%b8%aadisney-principled-brdf/" target="_blank" rel="noopener"
>在URP中搭建一个Disney Principled BRDF&lt;/a>&lt;/p></description></item><item><title>Games 202 环境光照</title><link>https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/</link><pubDate>Sat, 21 Jan 2023 14:17:21 +0000</pubDate><guid>https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/</guid><description>&lt;h2 id="ibl实时环境光照">IBL实时环境光照
&lt;/h2>&lt;p>IBL：Image-Based Lighting&lt;/p>
&lt;p>典型的保存方式：cube map，spherical map&lt;/p>
&lt;p>在不考虑阴影的情况下（Visibility term）真实的渲染方程&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224111730627.png" width="50%">
&lt;/figure>
&lt;p>真实求解需要用蒙特卡洛积分求解path tracing, 但是速度太慢&lt;/p>
&lt;p>使用之前的近似方案&lt;/p>
&lt;ul>
&lt;li>一点点小的区别，我们只需要对 BRDF 覆盖的范围 ΩG 进行积分即可&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224105959628.png" width="50%">
&lt;/figure>
&lt;h3 id="第一部分的积分">&lt;strong>第一部分的积分&lt;/strong>
&lt;/h3>&lt;p>红色区域就是对光源的入射方向（上面的 r ）进行了一个滤波&lt;/p>
&lt;p>prefilter，在 rendering 之前预先处理&lt;/p>
&lt;ul>
&lt;li>类似于 MIPMAP 的思想&lt;/li>
&lt;li>预先生成多张使用不同滤波核 filter 的环境贴图&lt;/li>
&lt;li>之后在 shading 的时候进行一个查询，双线性插值&lt;/li>
&lt;li>如果查询的值不是一个预先设置的滤波核的大小，三线性插值&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20210411153933349.png" width="50%">
&lt;/figure>
&lt;h3 id="第二部分的积分">&lt;strong>第二部分的积分&lt;/strong>
&lt;/h3>&lt;p>蓝色部分的积分：预先计算 precompute&lt;/p>
&lt;p>假定是 microfacet 的 BRDF&lt;/p>
&lt;ul>
&lt;li>只需要知道菲涅尔项、微表面的法线分布（roughness）
&lt;ul>
&lt;li>Precompute its value for all possible combinations of variables roughness, color (Fresnel term), etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>还是很难求积分 而且保存结果需要很大的内存&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224121919975.png" width="40%">
&lt;/figure>
&lt;p>菲涅尔项可以用一个函数近似&lt;/p>
&lt;ul>
&lt;li>Schlick’s approximation&lt;/li>
&lt;li>认为不同的材质是两个参数的函数：入射光夹角、基础反射率（基础颜色）&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224121704103.png" width="40%">
&lt;/figure>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20210411161156645.png" width="40%">
&lt;/figure>
&lt;p>D 项可以定义一个法线分布&lt;/p>
&lt;ul>
&lt;li>Beckmann distribution&lt;/li>
&lt;li>α 定义 roughness，分布的胖瘦&lt;/li>
&lt;li>θh 表示法线和半角矢量的夹角&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224121853466.png" width="40%">
&lt;/figure>
&lt;p>这样就可以简化为一个三维的预计算，但是计算量依旧很大&lt;/p>
&lt;h3 id="unreal-engine的降维思路">Unreal Engine的降维思路
&lt;/h3>&lt;p>显式把上面的菲涅尔项写进去，试图把 R0 分离开来&lt;/p>
&lt;ul>
&lt;li>分母的 F 会被消掉&lt;/li>
&lt;li>&lt;a class="link" href="https://learnopengl-cn.github.io/07%20PBR/03%20IBL/02%20Specular%20IBL/#brdf" target="_blank" rel="noopener"
>完整解释和求导公式&lt;/a>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224123946363.png" width="60%">
&lt;/figure>
&lt;ul>
&lt;li>这样的好处是降维成二维纹理预计算&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224124241620.png" width="40%">
&lt;/figure>
&lt;h2 id="球面谐波函数">球面谐波函数
&lt;/h2>&lt;ol>
&lt;li>回顾Games101的知识点，diffuse一般保留低频信息&lt;/li>
&lt;/ol>
&lt;p>Spherical Harmonics&lt;/p>
&lt;p>球面谐波函数的可视化&lt;/p>
&lt;ul>
&lt;li>每一行的频率是一样的，第 l 阶的 SH&lt;/li>
&lt;li>m=2l+1&lt;/li>
&lt;li>前 n 阶一共有 n2 个基函数&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20210414115518543.png" width="50%">
&lt;/figure>
&lt;p>某天某个大佬想到用这个SH函数来描绘环境光照产生的diffuse信息。发现只需要使用前三阶的SH函数就可以把误差缩小到1%&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/1.png" width="50%">
&lt;/figure>
&lt;p>而SH可以支持旋转的性质解决了旋转问题：&lt;/p>
&lt;p>同一行的SH可以从同一行其他的SH旋转表示出来&lt;/p>
&lt;h2 id="precomputed-radiance-transfer">Precomputed Radiance Transfer
&lt;/h2>&lt;ul>
&lt;li>利用球谐函数的性质进行预计算&lt;/li>
&lt;li>用另一种角度看待渲染方程&lt;/li>
&lt;li>&lt;strong>我们假设场景是不变的，改变的只是光照&lt;/strong>&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20210414142001805.png" width="50%">
&lt;/figure>
&lt;ul>
&lt;li>把 Lighting 表示为SH函数, 预计算Light transport部分&lt;/li>
&lt;/ul>
&lt;h3 id="公式推演">公式推演
&lt;/h3>&lt;p>将 diffuse 常数项从渲染方程中提取出来&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224160643950.png" width="40%">
&lt;/figure>
&lt;p>光照使用 SH 表示&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224160658065.png" width="20%">
&lt;/figure>
&lt;p>渲染方程变为&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224160711216.png" width="50%">
&lt;/figure>
&lt;p>红色部分与光照无关，可以预计算。渲染方程变为&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/games-202-%E7%8E%AF%E5%A2%83%E5%85%89%E7%85%A7/image-20230224160748654.png" width="20%">
&lt;/figure>
&lt;ul>
&lt;li>&lt;strong>场景是不能动的&lt;/strong>，因为动了，visibility 项就变了，预计算失效&lt;/li>
&lt;li>可以利用SH 的旋转性解决光源移动：如果光源做了一个旋转操作，很快就能够得到新的 SH&lt;/li>
&lt;/ul>
&lt;p>搜SH文章的时候看到这篇，对于这个观点有点感兴趣：&lt;a class="link" href="https://www.zhihu.com/column/c_1046337272613527552" target="_blank" rel="noopener"
>声音是2D的信号，图像是3D的信号&lt;/a>&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>无论 IBL 还是 PRT 都属于实现环境光照的方案，它们的区别在于：&lt;/p>
&lt;ul>
&lt;li>IBL 是一种从预计算环境光照出发的环境关照渲染方案：
&lt;ul>
&lt;li>采用环境贴图：存储占用空间较大，同时也占采样 I/O。&lt;/li>
&lt;li>能保留高频信息，常用于 diffuse/glossy/specular 物体的渲染。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>PRT 是一种从预计算 transfer function 出发的环境光照渲染方案：
&lt;ul>
&lt;li>采用 SH lighting：存储开销和重建环境光照的开销极低。&lt;/li>
&lt;li>只能保留低频信息，常用于 diffuse/glossy 物体的渲染。&lt;/li>
&lt;li>物体不可局部形变，材质不可动态：若发生变化，那么其 transfer 就需要更新。&lt;/li>
&lt;li>只考虑了物体局部 transfer 效果，没有考虑完整场景 transfer 效果，不过在其它 PRT 方案中有支持完整场景的 transfer 效果。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://learnopengl-cn.github.io/07%20PBR/03%20IBL/02%20Specular%20IBL/" target="_blank" rel="noopener"
>https://learnopengl-cn.github.io/07%20PBR/03%20IBL/02%20Specular%20IBL/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.cnblogs.com/KillerAery/p/15335369.html" target="_blank" rel="noopener"
>https://www.cnblogs.com/KillerAery/p/15335369.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.zhihu.com/column/c_1046337272613527552" target="_blank" rel="noopener"
>https://www.zhihu.com/column/c_1046337272613527552&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item></channel></rss>