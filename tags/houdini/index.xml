<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Houdini on Kampter</title><link>https://kampter.github.io/tags/houdini/</link><description>Recent content in Houdini on Kampter</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Apr 2023 17:46:43 +0800</lastBuildDate><atom:link href="https://kampter.github.io/tags/houdini/index.xml" rel="self" type="application/rss+xml"/><item><title>近期做的几个Unity和UE特效</title><link>https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/</link><pubDate>Tue, 18 Apr 2023 17:46:43 +0800</pubDate><guid>https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/</guid><description>&lt;h2 id="风格化毒液投射物">风格化毒液投射物
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/XIvmD_VJTCA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>请原谅我制作了一个毒液的技能特效。我原本想要制作毒液效果的，但是尝试了多次后一直不满意，就把部分素材拼凑成了毒液的技能特效，希望可以得到谅解。这里我用UE5来制作这个技能特效。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps1.jpg"
width="692"
height="321"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps1_hu_ff06b894d8405de4.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps1_hu_fc13321f70c654b3.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="517px"
>&lt;/p>
&lt;p>Texture的思路：用cross section + histogram scan制造一条线，通过不断叠加noise制造细节，并且用blend的subtract模式减掉球状的shape，用来模拟液体的感觉。最后用Directional Warp制造速度的感觉。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps2.jpg"
width="692"
height="361"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps2_hu_b5cbc918c64ec227.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps2_hu_ff5867e9206dc25e.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/p>
&lt;p>原本Trail是不需要有mesh的，但是我希望力大出奇迹（bushi），只是希望最终呈现的效果更加立体吧。这里用 point jitter制造noise并且把球体copy to point 来制造这个不规则的球状物体作为 projectile 的mesh。&lt;/p>
&lt;p>Material的部分我分成三块，第一块是 Projectile，我希望用Fresnel来描述mesh的边缘发光的感觉。同时在这个Material里面我还添加erosion的效果在alpha mask中，希望在Niagara中可以驱动这个erosion 制造飞溅的小液滴的效果，而不是用particle来实现。除此之外我还用一张noise 贴图来驱动vertex posion，希望制造液体飞出主体但是与主体牵连的感觉(液滴表面张力)。 Smoke的部分，用一张Noise作为UV的distortion添加在Main Noise Texture上面，并且添加圆形的mask和depth fade减弱边缘。Trail部分与Smoke基本相同，在Mask部分我用了横向的Gradient Mask，希望Trail的尾部逐渐虚化掉。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps3.jpg"
width="692"
height="374"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps3_hu_c8722b925452dec0.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps3_hu_ed0900ed9dd3c957.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="444px"
>&lt;/p>
&lt;p>Niagara实现：发射三个projectile mesh，用shape location + initial mesh orientation + rotate around point 实现绕圈旋转的效果，同时发射location event作为后续粒子的source，额外添加一个Light renderer实现ambient light的效果。两层的splash用projectile material的erosion动画实现，额外添加一些速度和force来制造细节。Trail的部分也是两层，一层较宽较浅色，整体细节比较少，一层颜色鲜明，变化的noise和细节增加。&lt;/p>
&lt;h2 id="抖动上升的会溶解的气泡">抖动上升的会溶解的气泡
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/TEsAazXW6Bw"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=bN84YxaBEGw" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=bN84YxaBEGw&lt;/a> 透明泡泡的材质有参考大佬的教学，主要是想要知道泡泡的 Iridescent shade究竟是怎么实现的, 毕竟在测试的这么短时间里手写扩展URP的Lit shader还是挺有挑战的。大佬的shader中用NdotV作为diffuse来采样gradient，这种手法与之前做过的卡通渲染有异曲同工之妙。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps4.jpg"
width="691"
height="376"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps4_hu_45005596d78f47be.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps4_hu_d5dfbb4df46747bb.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="441px"
>&lt;/p>
&lt;p>颜色的部分我用比较讨巧的方式，在Substance designer中 sample 一个ground truth的gradient map，并且把颜色承载Fresnel里面控制边缘颜色&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps5.jpg"
width="692"
height="184"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps5_hu_f8a9d4496f4bc54b.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps5_hu_64d2b1ae2e4e8f70.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="376"
data-flex-basis="902px"
>&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps6.jpg"
width="692"
height="323"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps6_hu_fae373abfc79941a.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps6_hu_88f436f0ffd03c3c.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="214"
data-flex-basis="514px"
>气泡中还有那种波纹流动的液体感觉，Ben Cloward 的做法是直接采样一张类似的noise 贴图来模拟，我这里用了屏幕空间叠加的方式。用一个随时间变化的Twirl voronoi noise来模拟，并且叠加在Scene Color上面（需要在URP开启Opaque texture）&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps7.jpg"
width="691"
height="268"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps7_hu_c7184ccea963d006.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps7_hu_dffb819870c4d7d7.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="257"
data-flex-basis="618px"
>&lt;/p>
&lt;p>消散的思路：一样通过输入noise，在noise上偏移一个很小的值并且输入smoothstep再相减来获取边缘的Mask。我额外计算一层Mask + edge后的结果输出到Alpha中，这样既可以有发光mask，又可以有alpha mask。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps8.jpg"
width="692"
height="390"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps8_hu_6f32b062d1b518c3.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps8_hu_6fc1e7f32064ac1b.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>在VFX graph制作比较简单，在一个区域内随即发射添加刚刚制作的shader的小球，让小球随着时间不断上升，并且让小球的scale_y随着时间不断变化，添加一些动态效果。&lt;/p>
&lt;p>然后根据lifetime控制消散动画，并且在合适的时间上设置GPU event添加第二套粒子作为小球的消散后的效果。&lt;/p>
&lt;p>这里有个小遗憾是没能实现第二套粒子精确发射在小球的消散边缘。查阅资料后发现了UE的实现办法：&lt;/p>
&lt;p>&lt;a class="link" href="https://realtimevfx.com/t/spawning-particles-from-the-edge-of-dissolving/18715%ef%bc%8c%e4%b9%9f%e5%b0%b1%e6%98%af%e9%a2%9d%e5%a4%96%e5%9c%a8Niagara%e7%9a%84module" target="_blank" rel="noopener"
>https://realtimevfx.com/t/spawning-particles-from-the-edge-of-dissolving/18715&lt;/a>&lt;/p>
&lt;p>也就是额外在Niagara的module script中额外计算一套消散mask，在计算出的边缘mask位置做判断发射粒子。VFX graph可能可以但是我现在比较菜还没有实现。&lt;/p>
&lt;p>另一个想到的比较通用的方式是在Houdini中提前Bakex消散动画的一张VAT，然后在小球需要消散的时间节点上播放这个动画，但是由于时间有限，以后我会尝试这个方案，参考如下。&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.google.com/presentation/d/1n6ykDR_O_57FLuRqrO0Dlb9U0GYNZ-QLPX8DVg7asqE/edit#slide=id.p10" target="_blank" rel="noopener"
>https://docs.google.com/presentation/d/1n6ykDR_O_57FLuRqrO0Dlb9U0GYNZ-QLPX8DVg7asqE/edit#slide=id.p10&lt;/a>&lt;/p>
&lt;h2 id="写实风格的雷击命中特效">写实风格的雷击命中特效
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/1Bt34O9qzXA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>闪电的部分会大致拆分成三部分来实现。第一部分是从天空中垂直落下的雷击，以蓝紫色为主体，伴有一些亮度较高的红黄色部分。第二部分是地面的命中痕迹，包括蓝紫色的感电效果，红黄色高亮的燃烧效果，以及黑灰色的烧焦痕迹。第三部分是地面由命中位置飞溅出来的碎块。&lt;/p>
&lt;p>Main Strike部分：&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps9.jpg"
width="692"
height="303"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps9_hu_5610664cd7281bc9.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps9_hu_ec425339e83ced6b.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>贴图的部分，我使用用四层不同Scale的perlin noise增加细小线条的细节。做法是cross section后用historgram scan控制线条的宽度，并且每一层用cells1这个边缘很锐利的noise&lt;/p>
&lt;p>来增加每一个线条的细小边缘。三层的细节加上一层的主体基本上就有我比较想要的效果（反复在引擎内测试）。另外再叠加1-2次的Blur来制造闪电线条周围发光的光晕感觉。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps10.jpg"
width="691"
height="350"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps10_hu_b4ad54e3c4ef9689.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps10_hu_4bd0197667c25ec2.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>Shader的部分我是用Shader graph来完成的。整体思路就是用Tilling and Offset来控制Strike 贴图随时间偏移，为了增加更多细节，在UV上面额外添加一层可以控制Tilling 和 Speed 的Noise 贴图。Erosion的部分直接把贴图当作alpha透明来使用，减去随时间变化的Noise贴图。最后额外添加一个IsTopStart来制造闪电的下落的动态下效果，思路也比较简单，用UV的V方向也就是垂直方向来添加一个偏移值，闪电两侧会被虚化掉。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps11.jpg"
width="692"
height="361"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps11_hu_d51f6b55759796d7.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps11_hu_f2c023a712bd438f.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/p>
&lt;p>Mesh制作我使用Houdini，尽管单面片的开销更低，我还是希望使用插片mesh，获得更好的立体感，思路也很简单。创建一条线，用point jitter来增加变化，用sweep来获得面片并且旋转90度生成插片，最后调整刚刚Sweep过的UV以及设置50 uniform scale，为了导入引擎更方便。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps12.jpg"
width="691"
height="350"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps12_hu_1d42f7b266c2a9f6.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps12_hu_4270dfabe0067f65.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="197"
data-flex-basis="473px"
>&lt;/p>
&lt;p>在VFX graph中是这样使用的，一共四层闪电效果。每一层效果原理几乎相同，只对参数有细微调整。在Particle初始化中，我会设置好lifetime, 我会希望前两个主体的闪电是立即出现，而后会有2-3根细小的闪电再出现（希望有一点残影或者能量延迟的感觉）。同时闪电会有细微的位置和旋转角度变化。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps13.jpg"
width="692"
height="519"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps13_hu_2a2b29916012a1d4.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps13_hu_9db925485e3eda41.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;p>主体的部分我会使用 Age over lifetime + sample curve 来设置刚刚shader中暴露好的参数。比如在主体色的部分，我会设置蓝紫色的主体以及少量的红黄色高能量的闪电。我还会设置闪电的大小，希望闪电的在X和Z方向的scale变化是比较硬的变化，来制造一种迅猛变化的感觉。&lt;/p>
&lt;p>Spark的部分：&lt;/p>
&lt;p>贴图我比较偷懒继续使用刚刚Stike的贴图，VFX graph中的设置也比较简单，设置好随时间变化的大小，旋转等参数即可。&lt;/p>
&lt;p>Ground Crack 的部分：&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps14.jpg"
width="692"
height="303"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps14_hu_d985391eaf51dc6e.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps14_hu_11fe2709425ce550.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="228"
data-flex-basis="548px"
>&lt;/p>
&lt;p>贴图的思路，用Cells4 + shape mapper制造地裂的原型基础感觉, 用shape 和perlin noise接入 warp来制造细节叠加进来。对于需要删除的部分用Blend 的subtract 模式不断尝试剔除不需要的地方。当效果基本到自己想要的感觉后，再用不同的blur增加地面裂开的宽度，并且模拟地面被劈开后缝隙中的感电和火光带来的辉光效果。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps15.jpg"
width="690"
height="327"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps15_hu_89dc32c7fb5e6d42.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps15_hu_1372bf70deb8fc41.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="211"
data-flex-basis="506px"
>&lt;/p>
&lt;p>Shader的部分与Stike的思路其实差不多。区别在于Erosion的边缘我希望有一些渐变而不是很硬的过度，因此用smoothstep来代替subtract。这里我几乎对每一个参数，比如color, alpha, emission 都有分别添加erosion，希望分别控制地面的效果，同时希望感电的区域出现在地裂的里面。对于地面裂开的地方，我使用了POM视察映射，希望增加更多细节。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps16.jpg"
width="691"
height="385"
srcset="https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps16_hu_38b90a11fa2d05f2.jpg 480w, https://kampter.github.io/p/%E8%BF%91%E6%9C%9F%E5%81%9A%E7%9A%84%E5%87%A0%E4%B8%AAunity%E5%92%8Cue%E7%89%B9%E6%95%88/wps16_hu_bf795b3671b541a3.jpg 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="179"
data-flex-basis="430px"
>&lt;/p>
&lt;p>VFX graph中，我是用三层不同的Crack效果，第一层是蓝紫色的感电效果，第二层是红黄色的高能量燃烧效果，最后是几乎纯黑色的焦痕，并且焦痕会持续更久一些直到完全消散掉。&lt;/p></description></item><item><title>GGJ2023 x GiCA 中国站回顾</title><link>https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/</link><pubDate>Wed, 15 Feb 2023 19:10:20 +0000</pubDate><guid>https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/</guid><description>&lt;h2 id="心得">心得
&lt;/h2>&lt;p>抱歉这么晚才来写这个回顾，近期忙于过年，情人节，以及学习等等事项，年后到现在终于有一段时间相对比较安静可以回顾一下这个赛事。&lt;/p>
&lt;p>首先感谢GGJ 2023能在这个时期召开，我从前公司离职到现在学习游戏制作已经有半年多的时间。一直在学习但是没有什么机会能够回顾学会什么，还欠缺什么，还想要什么。而且在这种比赛的压力下，很多问题才会暴漏出来，感谢这次能够让我总结的机会。&lt;/p>
&lt;p>其次感谢我的组员：&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215213145732.png" width="60%">
&lt;/figure>
&lt;p>48小时开发辛苦了，组内的除了我之外都是已经在游戏公司内工作的大佬，很高兴能与你们一起合作完成这个作品，希望我没有给你们拖后腿。&lt;/p>
&lt;p>最后感谢我的女朋友，感谢她在开发前与我一起准备；开发中陪伴我并鼓励，帮我一起寻找灵感；结束后我们一起分享喜悦。她也喜欢游戏，也喜欢宫崎骏的动画。游戏场景内的部分渲染风格也是我的一点私心，希望未来有机会能构建一个独属于我们的世界。&lt;/p>
&lt;figure>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215211434958.png" width="60%">
&lt;/figure>
&lt;figure>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/%E5%8D%A1%E7%89%87.png" width="60%">
&lt;/figure>
&lt;h2 id="技术实现">技术实现
&lt;/h2>&lt;p>鉴于这个48小时的小项目，虽然之前一直在玩HDRP渲染管线。这次就老老实实用URP了，这也是我第一次用URP。之前在HDRP中大部分shader都用shader graph就可以完成，这次在urp中纯手写还是很有挑战性的。&lt;/p>
&lt;p>整体美术风格，希望尝试一下卡通渲染。场景渲染希望借鉴吉卜力风格治愈、唯美的感觉，同时借鉴宫崎骏动画中对自然和平的追求。而人物我们选择格鲁特这一经典漫威角色，我想尝试一下厚涂风格带来的立体感。&lt;/p>
&lt;h3 id="找参考">找参考
&lt;/h3>&lt;p>背景参考，可以说是整个流程里最轻松的部分。因为我需要做的就是去看原来知名的对应题材的作品，游戏，动画，影视等。寻找其中的共同背景，色彩构成，空间元素构成。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/703b0a60d112ce88a03b199f9adc5ae.png"
width="1862"
height="1174"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/703b0a60d112ce88a03b199f9adc5ae_hu_9a9e5279d7dd725f.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/703b0a60d112ce88a03b199f9adc5ae_hu_f96234085d288298.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="158"
data-flex-basis="380px"
>&lt;/p>
&lt;p>乱糟糟随心所欲找了一些东西，也没有成体系。理想的过程是从图片总结出风格特点，再转化成引擎可以实现的方案做出来。&lt;/p>
&lt;h3 id="基础场景搭建">基础场景搭建
&lt;/h3>&lt;p>刚好在2022年底花不少精力学习和排坑的houdini PDG流程这次刚好可以应该用在这次项目中。&lt;/p>
&lt;p>用houdini 生成Heightmap已经是非常轻松愉快的事情了，这个项目不需要高精度雕琢，简单调整一些细节就可以搭建PDG节点了。哦对，在这之前要在unity中准备好terrain layer以及通过随即撒点种植的植物prefab，同时设置好LOD。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215220731444.png"
width="2560"
height="1351"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215220731444_hu_1ee2a1aad527a3f.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215220731444_hu_dfa6d5731e9b26a9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;hr>
&lt;p>大致流程就是在houdini中获取unity中准备好的prefab path，导出至foliage.csv中，然后把unity_instance写入prefab path属性再导入unity中cook。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215221135811.png"
width="2560"
height="1351"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215221135811_hu_c4966879b34ca806.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215221135811_hu_e0445ef7697d8848.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;p>用attributewrangle读取csv文件中的路径并写入撒点的s@unity_instance属性中，这一步操作很像之前在jupyter中操作csv文件。可以加一步将position, normal, orient, pscale等属性导出Pcache，通过VFX graph制作可交互的草地（官方演示Demo）这次没有使用。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215221611733.png"
width="584"
height="407"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215221611733_hu_821b39769ac0a972.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230215221611733_hu_2b133ebfda567479.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="143"
data-flex-basis="344px"
>&lt;/p>
&lt;hr>
&lt;p>成品效果大致是这样，忽略这个很像ue的场景，是ECS2 input system自带的。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/751808d6ddf300ae5d6ad432bd58b9b.png"
width="3080"
height="1801"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/751808d6ddf300ae5d6ad432bd58b9b_hu_215ce7582ab32b47.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/751808d6ddf300ae5d6ad432bd58b9b_hu_a63d6690bcd09da1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/p>
&lt;hr>
&lt;p>###草地渲染&lt;/p>
&lt;p>目前我比较喜欢的有三种方式来制作草地。&lt;/p>
&lt;ul>
&lt;li>第一种是terrain笔刷刷上带LOD的prefab模型，这是渲染效果最好的方案，也是成本最高的。&lt;/li>
&lt;li>第二种是terrain笔刷刷上带LOD的prefab插片草地，效果对比第一种略显粗糙但是性能提高很多。&lt;/li>
&lt;li>第三种来自官方的GrassWind Demo，在VFX graph中使用刚刚houdini导出的Pcache，而模型的部分可以任选模型或者插片，只是性能上的区别。&lt;/li>
&lt;/ul>
&lt;p>这次方案我们选择了第二种，带LOD的插片草地。插片草地的制作也很简单，在houdini中简单调整一下位置，垂直相机拍摄出texture即可。注意传递球形法线并且只保留向上的部分。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216001916221.png"
width="2560"
height="1351"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216001916221_hu_13235abfcb8cfcee.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216001916221_hu_834736e56363f45c.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;hr>
&lt;p>然后用triangulate2d 勾勒出边界并且组合成插片草模型。草地模型导入unity后关闭投射阴影，降低阴影带来的杂乱感。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216004203478.png"
width="2560"
height="1351"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216004203478_hu_eccff38234101ae3.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216004203478_hu_d77b867f4fb189b1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="189"
data-flex-basis="454px"
>&lt;/p>
&lt;hr>
&lt;p>草地渲染shader 我这次使用shader graph来制作，感谢2021.3版本的urp中支持shader graph。&lt;/p>
&lt;p>把草从上到下用top color和bottom color lerp起来控制主体，随后叠加两层gradient noise从整体控制草地的颜色而不仅仅是单一模型的变化同时模拟草地整体阴影效果。Wind的vertex movment也是同理，但是这里偷懒没有做，后面有机会去实现一下。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216001735010.png"
width="2546"
height="1373"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216001735010_hu_aab1116c44ff2209.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216001735010_hu_5adc54b518fc3c03.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="185"
data-flex-basis="445px"
>&lt;/p>
&lt;h3 id="树木渲染">树木渲染
&lt;/h3>&lt;p>树干的部分用half lambert 和blinn specular实现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-HLSL" data-lang="HLSL">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// diffuse&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half4&lt;/span> &lt;span class="n">albedo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SAMPLE_TEXTURE2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_MainTex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sampler_MainTex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">_BaseColor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// specular&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half&lt;/span> &lt;span class="n">_smoothness&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SAMPLE_TEXTURE2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_SmoothTex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sampler_SmoothTex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">g&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half3&lt;/span> &lt;span class="n">specular&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">pow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ndotH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_smoothness&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">lightColor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// lambert&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half&lt;/span> &lt;span class="n">lambert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ndotL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half&lt;/span> &lt;span class="n">halfLambert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">saturate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lambert&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mf">0.5&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half&lt;/span> &lt;span class="n">colorLambert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">halfLambert&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">_ColorLambertFactor&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">_ColorLambertFactor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">float3&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">colorLambert&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">albedo&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">specular&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>树叶也使用插片树叶实现，shader部分略微复杂，除了half lambert 和blinn specular以外。计算树叶自阴影增加细节。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-HLSL" data-lang="HLSL">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half4&lt;/span> &lt;span class="n">shadowWS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TransformWorldToShadowCoord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IN&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">positionWS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">half&lt;/span> &lt;span class="n">shadowAttenuation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetMainLight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shadowWS&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">shadowAttenuation&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">color&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nb">lerp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">shadowAttenuation&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_ShadowIntensity&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>模拟投射效果，很大程度上提升树叶颜色的纯度。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">float3 transmissionhalf = normalWS + normalize(lightDir);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">float3 transmission = saturate(dot(-transmissionhalf, viewDirWS) - _TransmissionThreshold);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">transmission = lerp( 1 + 0.5 * _TransmissionIntensity, 1 +_TransmissionIntensity, transmission);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">color = color * transmission;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>模拟假的SSS效果&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">half3 step1 = -1 * saturate((normalWS * _NormalInfluence * lightDir));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">half4 step2 = pow(saturate(dot(step1, viewDirWS)), _SSSPower) * _SSSColor;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">half4 step3 = (1 - _Thickness) * step2;color = color + step3;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后的效果图如下，踩坑点，记得写阴影pass并且阴影也要alpha clip。还是比较杂乱，没有把模型导入houdini传递一下球形法线，48小时时间来不及了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Name&lt;/span> &lt;span class="s2">&amp;#34;Depth Rim&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Tags&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;LightMode&amp;#34;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;DepthOnly&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ZWrite&lt;/span> &lt;span class="n">On&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ColorMask&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Cull&lt;/span> &lt;span class="n">Off&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">HLSLPROGRAM&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#pragma vertex DepthOnlyVertex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#pragma fragment DepthOnlyFragment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#include &amp;#34;Packages/com.unity.render-pipelines.universal/Shaders/LitInput.hlsl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TEXTURE2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_MainTex&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">SAMPLER&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sampler_MainTex&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CBUFFER_START&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UnityPerMaterial&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">half4&lt;/span> &lt;span class="n">_MainTex_ST&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">half&lt;/span> &lt;span class="n">_ClipValue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CBUFFER_END&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">Attributes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">float4&lt;/span> &lt;span class="n">positionOS&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">POSITION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">float2&lt;/span> &lt;span class="n">uv&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">TEXCOORD0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="n">Varyings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">float2&lt;/span> &lt;span class="n">uv&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">TEXCOORD0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">float4&lt;/span> &lt;span class="n">positionCS&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">SV_POSITION&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UNITY_VERTEX_INPUT_INSTANCE_ID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UNITY_VERTEX_OUTPUT_STEREO&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Varyings&lt;/span> &lt;span class="n">DepthOnlyVertex&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Attributes&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">VertexPositionInputs&lt;/span> &lt;span class="n">vertex_position_inputs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GetVertexPositionInputs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">positionOS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Varyings&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">OUT&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">positionCS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vertex_position_inputs&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">positionCS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">OUT&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TRANSFORM_TEX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">IN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">_MainTex&lt;/span>&lt;span class="p">);;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">OUT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">half4&lt;/span> &lt;span class="n">DepthOnlyFragment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Varyings&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">SV_TARGET&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">half4&lt;/span> &lt;span class="n">diffColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SAMPLE_TEXTURE2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_MainTex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sampler_MainTex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">IN&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">uv&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">diffColor&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">_ClipValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ENDHLSL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216011958528.png"
width="1474"
height="808"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216011958528_hu_29bb88d8860f2ca4.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216011958528_hu_f4eb181b53495093.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="182"
data-flex-basis="437px"
>&lt;/p>
&lt;hr>
&lt;h3 id="人物渲染">人物渲染
&lt;/h3>&lt;p>人物渲染我用的是shader graph + custom function的方式实现。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216140256869.png"
width="1766"
height="941"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216140256869_hu_8ca8c41cbf5cb635.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216140256869_hu_8ee31b3354aea349.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="450px"
>&lt;/p>
&lt;hr>
&lt;p>大致思路与直接手写没有太大区别。首先遍历场景内的灯光（多灯光支持）获得每个灯光的颜色，方向，衰减属性用以叠加计算。光照模型用smoothstep函数控制半兰伯特模型的输出，同时设置Smooth参数来调整边界的光滑度。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141054289.png"
width="300"
height="400"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141054289_hu_b34f63e01a28ed83.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141054289_hu_f897d7a2702b5b78.png 1024w"
loading="lazy"
alt="原始效果"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141119084.png"
width="300"
height="400"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141119084_hu_48caad2b29609533.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141119084_hu_c9a29138fb6ec0ae.png 1024w"
loading="lazy"
alt="smoothstep"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141856838.png"
width="300"
height="400"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141856838_hu_5ca55bd986574592.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141856838_hu_cd79365eb0747c64.png 1024w"
loading="lazy"
alt="smooth"
class="gallery-image"
data-flex-grow="75"
data-flex-basis="180px"
>&lt;/p>
&lt;hr>
&lt;p>最左边smooth = 0, 中间smooth = 0.2 右边为开启边缘光的效果。边缘光用非常偷懒的方式实现&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141737262.png"
width="1020"
height="455"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141737262_hu_bde259ad3a6c1864.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216141737262_hu_8c4b0751ec29faf9.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="538px"
>&lt;/p>
&lt;hr>
&lt;h3 id="水面渲染">水面渲染
&lt;/h3>&lt;p>用根据时间变化的gradient noise控制水面的vertex position 移动，主要用以实现小幅度的潮汐的感觉。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216144605097.png"
width="1207"
height="480"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216144605097_hu_ab62e360281cda95.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216144605097_hu_3a45ff75c48dbe3a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="251"
data-flex-basis="603px"
>&lt;/p>
&lt;hr>
&lt;p>水面颜色用屏幕空间深度来控制，lerp深水区和浅水区颜色，这个实现来自unity的官方演示视频。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145156030.png"
width="1254"
height="463"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145156030_hu_392fbc76d3304d00.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145156030_hu_34a59ba4b6590091.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="270"
data-flex-basis="650px"
>&lt;/p>
&lt;hr>
&lt;p>通过调整Strength和depth控制浅水和深水区&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145341579.png"
width="500"
height="300"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145341579_hu_13fd93605ecc42b0.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145341579_hu_a4cbb23d2a330dad.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145357665.png"
width="500"
height="300"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145357665_hu_2b5a5cbec0ca587d.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145357665_hu_64a87d697d62c287.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145036049.png"
width="535"
height="401"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145036049_hu_b43d470eeb5d1a7e.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145036049_hu_935dfe2f1da26466.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
>&lt;/p>
&lt;hr>
&lt;p>反射和水面波纹实现。选取两张水面法线纹理图，设置好根据时间移动的方向和速度，用reoriented normal blend的叠加方式（效果更好），用以模拟水面被风吹动的波纹。水面反射通过把刚刚的结果叠加至Screen position中，再把结果输出至Scene Color的UV中, 与给刚刚求得的深度图结果根据aplha通道进行lerp，输出至normal即可获得还算不错的具有反射效果的水面波纹。&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216150250404-1679568609839-1.png"
width="1249"
height="450"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216150250404-1679568609839-1_hu_31687bcaff5db8e.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216150250404-1679568609839-1_hu_7376dba1cc7f17f5.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="277"
data-flex-basis="666px"
>&lt;/p>
&lt;hr>
&lt;p>最终效果如图&lt;/p>
&lt;p>&lt;img src="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145806132.png"
width="1562"
height="814"
srcset="https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145806132_hu_944fb9f9f475efbc.png 480w, https://kampter.github.io/p/ggj2023-x-gica-%E4%B8%AD%E5%9B%BD%E7%AB%99%E5%9B%9E%E9%A1%BE/image-20230216145806132_hu_bd70a21bea1649d8.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/p>
&lt;hr>
&lt;h3 id="体积云">体积云
&lt;/h3>&lt;p>云直接用的cubemap贴图贴上去的skybox，48小时实在没有时间实现了&lt;/p>
&lt;h2 id="总结">总结
&lt;/h2>&lt;p>不少内容都是临时拼凑和网上抄来的，也没有认真调整和细化方案，没有定制自己的东西。感觉还是太菜了，希望接下来继续沉下来多积累一些东西。&lt;/p>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/593500186" target="_blank" rel="noopener"
>风格化树——树叶分析与实现 - 知乎 (zhihu.com)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/482749051" target="_blank" rel="noopener"
>水一下原神树的渲染 - 知乎 (zhihu.com)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=gRq-IdShxpU" target="_blank" rel="noopener"
>Making a Water Shader in Unity with URP! (Tutorial) - YouTube&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=FIP6I1x6lMA" target="_blank" rel="noopener"
>(4) Unity | Making a Lit Toon Shader in Shader Graph - YouTube&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Houdini</title><link>https://kampter.github.io/p/houdini/</link><pubDate>Mon, 18 Dec 2017 16:23:55 +0000</pubDate><guid>https://kampter.github.io/p/houdini/</guid><description>&lt;h3 id="particle-trails">Particle Trails
&lt;/h3>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/eKbWienD2iQ"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h3 id="water-cathedral-beauty">Water Cathedral Beauty
&lt;/h3>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/lz5tCo2st0s"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div></description></item></channel></rss>